<?php

use Drupal\Component\Utility\Html;
use Drupal\media_entity\entity\Media;
use Drupal\node\Entity\Node;

/**
 * @file
 * Functions to support theming in the Pattern Lab theme.
 */

/**
 * Implements template_preporcess_views_view__VIEW_ID()
 *
 * Sets the row content for the view template.
 * @see views-view--tagged-content.html.twig
 */
function freelance_preprocess_views_view__tagged_content(&$variables) {
  $rows = $variables['rows'];
  foreach ($rows as $id => $row) {
    $variables['rows'][$id] = [];
    $variables['rows'][$id]['content'] = $row;
  }
}

/**
 * Preprocess variables for html templates.
 * @param $variables
 */
function freelance_preprocess(&$variables) {
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception $e) {
    $variables['is_front'] = FALSE;
  }
  $variables['#cache']['contexts'][] = 'url.path.is_front';
}

/**
 * Preprocess variables for html templates.
 * @param $variables
 */
function freelance_preprocess_html(&$variables) {
  $variables['path_info']['args'] = Html::cleanCssIdentifier(ltrim(\Drupal::request()->getPathInfo(), '/'));
  if (!empty($variables['node_type'])) {
    $type = str_replace('_', '-', $variables['node_type']);
    $variables['path_info']['node_type_class'] = "node-type__{$type}";
  }
  // Prepare the html template for production-specific
  // output like google tag manager
  if (isset($_ENV['PLATFORM_BRANCH']) && $_ENV['PLATFORM_BRANCH'] == 'master') {
    $variables['is_production'] = TRUE;
  }
}

/**
 * Implements template_preprocess_node().
 * Pepares the image entity for theming
 */
function freelance_preprocess_node(&$variables) {
  /** @var \Drupal\node\Entity\Node $node */
  $node = &$variables['node'];
  if ($node->hasField('field_image_reference')) {
    if ($media_entity = freelance_get_media_entity_from_reference($node->get('field_image_reference')->first())) {
      $variables['img'] = freelance_get_image_properties_from_media_entity($media_entity);
    }
  }
}

function freelance_preprocess_media(&$variables) {
  if ($variables['media']->bundle() == 'image') {
    $variables['img'] = freelance_get_image_properties_from_media_entity($variables['media']);
  }
}

/**
 * Preprocess variables for search result templates.
 */
function freelance_preprocess_search_result(&$variables) {
  if ($node = $variables['result']['node']) {
    if ($node->hasField('field_publication_date')) {
      $dateTime = $node->get('field_publication_date')->first();
      $timestamp = strtotime($dateTime->getString());
      $variables['formatted_date'] = \Drupal::service('date.formatter')->format($timestamp, 'date_full');
    }
    if ($node->hasField('field_image_reference')) {
      $media_entity = freelance_get_media_entity_from_reference($node->get('field_image_reference')->first());
      $variables['img'] = freelance_get_image_properties_from_media_entity($media_entity);
    }
  }
}

/**
 * Implements hook_preprocess_entity().
 */
function freelance_preprocess_paragraph(&$variables) {
  $paragraph = &$variables['paragraph'];
  if ($paragraph->hasField('field_image')) {
    $media_entity = freelance_get_media_entity_from_reference($paragraph->get('field_image')->first());
    $variables['img'] = freelance_get_image_properties_from_media_entity($media_entity);
  }
}

/**
 * Implements hook_preprocess_entity().
 * Removes the contextual links, which were messing with nth-of-type css
 */
function freelance_preprocess_paragraph__hub_grid(&$variables) {
  if (isset($variables['content']['contextual_links'])) {
    unset($variables['content']['contextual_links']);
  }
}

/**
 * Implements hook_preprocess_entity().
 */
function freelance_preprocess_paragraph__selected_content(&$variables) {
  $paragraph = &$variables['paragraph'];
  if ($paragraph->get('field_display_type')->value == 'panel') {
    $featured_teaser = freelance_prepare_featured_teaser($variables);
    $variables['featured_teaser'] = $featured_teaser;
  }
}

/**
 * Implements hook_preprocess_entity().
 */
function freelance_preprocess_paragraph__tagged_content(&$variables) {
  if ($current_node = \Drupal::request()->attributes->get('node')) {
    $variables['nid'] = $current_node->id();
  }
}

/**
 * Takes an entity_reference and returns the media_entity

 * @param  $media_reference
 *
 * @return object the media entity
 */
function freelance_get_media_entity_from_reference($media_reference=NULL) {
  if ($media_reference) {
    $media_entity = $media_reference->get('entity')->getTarget();
    return $media_entity;
  }
  return NULL;
}

/**
 * Takes a media entity and returns a keyed array of entities: file, image, and media.
 *
 * @param $media_entity
 *
 * @return array containing a file, image, and media entity or null
 */
function freelance_get_image_properties_from_media_entity($media_entity) {
  if ($media_entity) {
    if ($img_entity = $media_entity->get('field_image')->first()) {
      if ($file_entity = $img_entity->get('entity')->getTarget()) {
        return [
          'uri' => $file_entity->get('uri')->getString(),
          'alt' => $img_entity->get('alt')->getString(),
          'title' => $img_entity->get('title')->getString(),
          'caption' => $media_entity->get('field_caption')->value,
          'original_size' => $media_entity->get('field_original_size')->getValue(),
        ];
      }
    }
  }
  return NULL;
}

/**
 * Preprocesses the theme variables for
 * selected content panel display type
 *
 * @see paragraph--selected-content.html.twig
 */
function freelance_prepare_featured_teaser(&$variables) {
  $featured_teaser_reference = $variables['content']['field_referenced_posts'][0];
  $featured_teaser = $featured_teaser_reference['#node'];
  $options = ['absolute' => TRUE];
  $url_object = Drupal\Core\Url::fromRoute('entity.node.canonical', ['node' => $featured_teaser->id()], $options);
  $featured_teaser->url = $url_object->toString();
  $primary_image = $featured_teaser->get('field_image_reference');
  if (!empty($primary_image)) {
    $media_entity = freelance_get_media_entity_from_reference($primary_image->first());
    $featured_teaser->img = freelance_get_image_properties_from_media_entity($media_entity);
  }
  $shifted_count = count($variables['content']['field_referenced_posts']['#items']) - 1;
  for ($i = 0; $i < $shifted_count; $i++) {
    if (!empty($variables['content']['field_referenced_posts'][$i + 1])) {
      $variables['content']['field_referenced_posts'][$i] = $variables['content']['field_referenced_posts'][$i + 1];
    }
  }
  unset($variables['content']['field_referenced_posts'][$shifted_count]);
  return $featured_teaser;
}

/**
 * Preprocess variables for field templates.
 *
 *   - Configure Plot.ly and Tableau for theming.
 */
function freelance_preprocess_field(&$variables, $hook) {
  switch ($variables['field_name']) {
    case 'field_tableau_embed':
      freelance_confirm_tableau($variables);
      break;
    case 'field_plotly_embed_code':
      freelance_confirm_plotly($variables);
      break;
    default:
      break;
  }
}

function freelance_confirm_tableau(&$variables) {
  $embed = !empty($variables['items'][0]['content']['#context']['value']) ? $variables['items'][0]['content']['#context']['value'] : '';
  if (!empty($embed)) {
    if (!strpos($embed, 'tableauPlaceholder')) {
      drupal_set_message('Oops! There\'s something wrong with your embed code. Tableau embed codes include a tableauPlaceholder div. Please try again.', 'error');
    }
  }
}

function freelance_confirm_plotly(&$variables) {
  $embed = !empty($variables['items'][0]['content']['#context']['value']) ? $variables['items'][0]['content']['#context']['value'] : '';
  if (!empty($embed)) {
    foreach (Html::load($embed)->getElementsByTagName('iframe') as $iframe) {
      $variables['iframe_src'] = $iframe->getAttribute('src');
      $width = $iframe->getAttribute('width');
      $height = $iframe->getAttribute('height');
      $variables['img_src'] = str_replace('.embed', '.png', $variables['iframe_src']);
      $variables['plotly_url'] = str_replace('.embed', '/', $variables['iframe_src']);
      $variables['paddingTop'] =  $height / $width * 100;
    }
    if (empty($width) || empty($height) || empty($variables['iframe_src'] || empty($variables['img_src']))) {
      drupal_set_message('Oops! There\'s something wrong with your embed code. The code needs height, width, and source (src).', 'error');
    }
  }
  else {
    drupal_set_message('Sorry! No value found for your embed code.', 'error');
  }
}
