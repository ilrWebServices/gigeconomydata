<?php

use Drupal\Component\Utility\Html;
use Drupal\media_entity\entity\Media;
use Drupal\node\Entity\Node;

/**
 * @file
 * Functions to support theming in the Pattern Lab theme.
 */

/**
 * Implements template_preporcess_views_view__VIEW_ID()
 *
 * Sets the row content for the view template.
 * @see views-view--tagged-content.html.twig
 */
function freelance_preprocess_views_view__tagged_content(&$variables) {
  $rows = $variables['rows'];
  foreach ($rows as $id => $row) {
    $variables['rows'][$id] = [];
    $variables['rows'][$id]['content'] = $row;
  }
}

/**
 * Preprocess variables for html templates.
 * @param $variables
 */
function freelance_preprocess(&$variables) {
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception $e) {
    $variables['is_front'] = FALSE;
  }
  $variables['#cache']['contexts'][] = 'url.path.is_front';
}

/**
 * Preprocess variables for html templates.
 * @param $variables
 */
function freelance_preprocess_html(&$variables) {
  $variables['path_info']['args'] = Html::cleanCssIdentifier(ltrim(\Drupal::request()->getPathInfo(), '/'));
  if (!empty($variables['node_type'])) {
    $vars['path_info']['node_type_class'] = "node-type__{$variables['node_type']}";
  }
  // Prepare the html template for production-specific
  // output like google tag manager
  if (isset($_ENV['PLATFORM_BRANCH']) && $_ENV['PLATFORM_BRANCH'] == 'master') {
    $variables['is_production'] = TRUE;
  }
}

/**
 * Implements template_preprocess_node().
 * Pepares the image entity for theming
 */
function freelance_preprocess_node(&$variables) {
  /** @var \Drupal\node\Entity\Node $node */
  $node = &$variables['node'];
  if ($node->hasField('field_image_reference')) {
    $variables['img'] = freelance_get_image_properties_from_media_reference($node->get('field_image_reference')->first());
  }
}

/**
 * Preprocess variables for search result templates.
 */
function freelance_preprocess_search_result(&$variables) {
  if ($node = $variables['result']['node']) {
    if ($node->hasField('field_publication_date')) {
      $dateTime = $node->get('field_publication_date')->first();
      $timestamp = strtotime($dateTime->getString());
      $variables['formatted_date'] = \Drupal::service('date.formatter')->format($timestamp, 'date_full');
    }
    if ($node->hasField('field_image_reference')) {
      $variables['img'] = freelance_get_image_properties_from_media_reference($node->get('field_image_reference')->first());
    }
  }
}

/**
 * Implements hook_preprocess_entity().
 */
function freelance_preprocess_paragraph(&$variables) {
  $paragraph = &$variables['paragraph'];
  if ($paragraph->hasField('field_image')) {
    $variables['img'] = freelance_get_image_properties_from_media_reference($paragraph->get('field_image')->first());
  }
}

/**
 * Implements hook_preprocess_entity().
 */
function freelance_preprocess_paragraph__selected_content(&$variables) {
  $paragraph = &$variables['paragraph'];
  if ($paragraph->get('field_display_type')->value == 'panel') {
    $featured_teaser = freelance_prepare_featured_teaser($variables);
    $variables['featured_teaser'] = $featured_teaser;
  }
}

/**
 * Implements hook_preprocess_entity().
 */
function freelance_preprocess_paragraph__tagged_content(&$variables) {
  if ($current_node = \Drupal::request()->attributes->get('node')) {
    $variables['nid'] = $current_node->id();
  }
}

/**
 * Takes a media reference and returns a keyed array of entities: file, image, and media.
 *
 * @param $media_reference
 *
 * @return array containing a file, image, and media entity or null
 */
function freelance_get_image_properties_from_media_reference($media_reference) {
  if ($media_reference) {
    $media_entity = $media_reference->get('entity')->getTarget();
    if ($img_entity = $media_entity->get('field_image')->first()) {
      if ($file_entity = $img_entity->get('entity')->getTarget()) {
        return [
          'uri' => $file_entity->get('uri')->getString(),
          'alt' => $img_entity->get('alt')->getString(),
          'title' => $img_entity->get('title')->getString(),
          'caption' => $media_entity->get('field_caption')->value,
        ];
      }
    }
  }
  return NULL;
}

/**
 * Preprocesses the theme variables for
 * selected content panel display type
 *
 * @see paragraph--selected-content.html.twig
 */
function freelance_prepare_featured_teaser(&$variables) {
  $featured_teaser_reference = $variables['content']['field_referenced_posts'][0];
  $featured_teaser = $featured_teaser_reference['#node'];
  $options = ['absolute' => TRUE];
  $url_object = Drupal\Core\Url::fromRoute('entity.node.canonical', ['node' => $featured_teaser->id()], $options);
  $featured_teaser->url = $url_object->toString();
  $featured_teaser->img = freelance_get_image_properties_from_media_reference($featured_teaser->get('field_image_reference')->first());
  $shifted_count = count($variables['content']['field_referenced_posts']['#items']) - 1;
  for ($i = 0; $i < $shifted_count; $i++) {
    $variables['content']['field_referenced_posts'][$i] = $variables['content']['field_referenced_posts'][$i + 1];
  }
  unset($variables['content']['field_referenced_posts'][$shifted_count]);
  return $featured_teaser;
}
