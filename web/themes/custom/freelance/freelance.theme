<?php

/**
 * @file
 * Functions to support theming in the Pattern Lab theme.
 */


/**
 * Implements template_preprocess_node().
 * Pepares the image entity for theming
 */
function freelance_preprocess_node(&$variables) {
  /** @var \Drupal\node\Entity\Node $node */
  $node =& $variables['node'];
  if ($node->hasField('field_image_reference')) {
    if ($node->get('field_image_reference')->first()) {
      if ($entity_ref_item = $node->get('field_image_reference')->first()) {
        $entities = freelance_get_entities_from_media_entity($entity_ref_item->get('entity')->getTarget());
        if ($entities['file']) {
          $variables['img'] = freelance_get_image_properties_array($entities['file'], $entities['img']);
        }
      }
    }
  }
}

/**
 * Takes a media entity and returns a keyed array of entities: file, image, and media.
 *
 * @param $media_entity
 *
 * @return array containing a file, image, and media entity or null
 */
function freelance_get_entities_from_media_entity($media_entity) {
  if ($img_entity_list = $media_entity->get('field_image')) {
    if ($img_entity = $img_entity_list->first()) {
      if ($file_entity = $img_entity->get('entity')->getTarget()) {
        return ['file' => $file_entity, 'img' => $img_entity, 'media' => $media_entity];
      }
    }
  }
  return NULL;
}

/**
 * Returns a keyed array of strings representing image src, alt, and title.
 *
 * @param $file_entity
 * @param $img_entity
 *
 * @return array keyed by image property
 */
function freelance_get_image_properties_array($file_entity, $img_entity) {
  return [
    'uri' => $file_entity->get('uri')->getString(),
    'alt' => $img_entity->get('alt')->getString(),
    'title' => $img_entity->get('title')->getString()
  ];
}
